/* eslint-disable react-hooks/exhaustive-deps */
import React, { FunctionComponent, memo, useEffect, useState } from "react";
import { useQueryClient } from "@tanstack/react-query";
import moment from "moment";
import { useDeleteUnsignedTransactionMutation } from "@/api/blockchain";
import { USE_QUERY_KEYS } from "@/constants/useQueryKeys";
import { useModal } from "@/hooks/context";
import { Block } from "@/types";
import { DeleteIcon } from "../..";
import CloseIcon from "../../icons/Close";
import { SignTransaction } from "../sign-transaction/SignTransaction";

type Props = {
  unsignedTransactions: Block[];
};

export const UnsignedTransactionsModal: FunctionComponent<Props> = ({ unsignedTransactions }) => {
  const [state, setState] = useState(unsignedTransactions);
  const { closeModal, openModal } = useModal();
  const deleteTransactionMutation = useDeleteUnsignedTransactionMutation();
  const queryClient = useQueryClient();

  const handleSignTransaction = (transaction: Block) => {
    openModal(<SignTransaction transaction={transaction} onClose={closeModal} />);
  };

  const handleDeleteTransaction = (id: number) => {
    deleteTransactionMutation.mutateAsync(id, {
      onSuccess: (transactions) => {
        queryClient.invalidateQueries({
          queryKey: [USE_QUERY_KEYS.BLOCKCHAIN.QUERY.GET_UNSIGNED_TRANSACTIONS],
        });
        setState(transactions);
      },
    });
  };

  useEffect(() => {
    if (!state.length) closeModal();
  }, [state]);

  return (
    <div className="max-h-[calc(100vh_-_120px)] max-w-[600px] overflow-y-scroll scrollbar-hide">
      <div className="mb-4 flex justify-between">
        <h2 className="text-2xl font-semibold">–ù–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏</h2>
        <button onClick={closeModal} className="">
          <CloseIcon className="h-5 w-5 fill-black/50 hover:fill-black/100" />
        </button>
      </div>
      <p className="border-b pb-3">
        –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –±–ª–æ–∫ –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤
        —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –≥–¥–µ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∏ –æ—Ç —Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π
        —Å–æ–∑–¥–∞–ª —ç—Ç–æ—Ç –±–ª–æ–∫. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏ —Å–≤–æ–µ–π –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å—å—é, –±–ª–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –º–∞–π–Ω–µ—Ä—É
        –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±—ã—á–∏, –≤ —Ö–æ–¥–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–∞–π–Ω–µ—Ä –∏—â–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ
        –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ –≤ —Ü–µ–ø–∏ –±–ª–æ–∫–æ–≤. üîÑüîê
      </p>
      <div className="flex flex-col">
        {state.map((transaction, index) => (
          <div
            key={transaction.hash}
            className="flex flex-col items-center justify-between border-x border-b bg-white px-4 pt-4"
          >
            <div className="flex w-full items-start justify-between">
              <div className="text-lg font-semibold">
                ‚õìÔ∏è Block #{++index} -{" "}
                {moment(transaction.created_date).format("DD-MM-YYYY h:mm:ss")}
              </div>
              <div className="flex items-center gap-3">
                <button
                  onClick={() => handleSignTransaction(transaction)}
                  className="rounded-md bg-blue-500 px-4 py-1 text-white transition-all hover:bg-blue-600 focus:outline-none"
                >
                  üñãÔ∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å
                </button>
                <button
                  className="group rounded-md border-[2px] border-red-500 p-1 transition-all hover:bg-red-500"
                  onClick={() => handleDeleteTransaction(transaction.id)}
                >
                  <DeleteIcon className="h-5 w-5 stroke-red-500 group-hover:stroke-white" />
                </button>
              </div>
            </div>
            <div className="my-4 max-w-md self-start truncate text-gray-600">
              <p className="truncate">üë§ –ê–¥—Ä–µ—Å–∞—Ç: {JSON.parse(transaction.data).receivedAddress}</p>
              <p>üí∞ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {JSON.parse(transaction.data).amount}</p>
              <p className="truncate">üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {JSON.parse(transaction.data).message}</p>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};
