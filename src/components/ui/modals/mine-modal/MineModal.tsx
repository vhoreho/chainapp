import React, { FunctionComponent, useEffect, useState } from "react";
import { useQueryClient } from "@tanstack/react-query";
import { useMineBlockMutation } from "@/api/blockchain";
import { Spinner } from "@/components/common";
import { USE_QUERY_KEYS } from "@/constants/useQueryKeys";
import { useSecondaryModal } from "@/hooks/context/useSecondaryModal";
import { generateRandomNumber, generateRandomOperator } from "@/utils/mining";
import CloseIcon from "../../icons/Close";

type Props = {
  id: number;
};

export const MineModal: FunctionComponent<Props> = ({ id }) => {
  const { closeModal } = useSecondaryModal();
  const [mathExample, setMathExample] = useState<string>("");
  const [userAnswer, setUserAnswer] = useState<string>("");
  const [error, setError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const mineBlockMutation = useMineBlockMutation();
  const queryClient = useQueryClient();

  const generateRandomExample = (): void => {
    const num1 = generateRandomNumber(1, 100);
    const num2 = generateRandomNumber(1, 100);
    const operator = generateRandomOperator();

    const newMathExample = `${num1} ${operator} ${num2}`;
    setMathExample(newMathExample);
  };

  const checkAnswer = (): void => {
    setError(null);
    setIsLoading(true);
    const [num1, operator, num2] = mathExample.split(" ");
    const correctAnswer = calculateResult(Number(num1), Number(num2), operator);

    if (userAnswer === correctAnswer.toString()) {
      mineBlockMutation.mutateAsync(
        { id, nonce: +userAnswer },
        {
          onSuccess: () => {
            queryClient.invalidateQueries({
              queryKey: [USE_QUERY_KEYS.BLOCKCHAIN.QUERY.GET_CREATED_TRANSACTIONS],
            });
            queryClient.invalidateQueries({
              queryKey: [USE_QUERY_KEYS.BLOCKCHAIN.QUERY.GET_SIGNED_TRANSACTIONS],
            });
            queryClient.invalidateQueries({
              queryKey: [USE_QUERY_KEYS.BLOCKCHAIN.QUERY.GET_TRANSACTIONS_FOR_MINING],
            });
            setIsLoading(false);
            closeModal();
          },
        },
      );
    } else {
      setError("–û—Ç–≤–µ—Ç –Ω–µ –≤–µ—Ä–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ");
      generateRandomExample();
      setUserAnswer("");
      setIsLoading(false);
    }
  };

  const calculateResult = (num1: number, num2: number, operator: string): number => {
    switch (operator) {
      case "+":
        return num1 + num2;
      case "-":
        return num1 - num2;
      case "*":
        return num1 * num2;
      case "/":
        return num1 / num2;
      default:
        return NaN;
    }
  };

  useEffect(() => {
    generateRandomExample();
  }, []);

  return (
    <div className="min-w-[400px] max-w-[760px]">
      <div className="mb-4 flex justify-between">
        <h2 className="text-2xl font-semibold">–î–æ–±—ã—Ç—å –±–ª–æ–∫</h2>
        <button onClick={closeModal} className="">
          <CloseIcon className="h-5 w-5 fill-black/50 hover:fill-black/100" />
        </button>
      </div>
      <p className="my-4">
        –ú–∞–π–Ω–µ—Ä—ã –∏–≥—Ä–∞—é—Ç –≤–∞–∂–Ω—É—é —Ä–æ–ª—å –≤ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –±–ª–æ–∫—á–µ–π–Ω–∞, —Ä–µ—à–∞—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ
        –∑–∞–¥–∞—á–∏. üßÆ –≠—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å, –∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–∫ –¥–æ–±—ã—á–∞ –±–ª–æ–∫–∞, —Ç—Ä–µ–±—É–µ—Ç –æ—Ç –º–∞–π–Ω–µ—Ä–æ–≤ —Ä–µ—à–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö
        –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π. <br /> üîç –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: –ú–∞–π–Ω–µ—Ä–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω–æ–µ
        –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ. <br />
        üí° –†–µ—à–µ–Ω–∏–µ: –ú–∞–π–Ω–µ—Ä—ã –≤—ã—á–∏—Å–ª—è—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–¥–∞—á–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–ª–æ–∂–µ–Ω–∏–µ —á–∏—Å–µ–ª.
        <br /> ü§î –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞: –†–µ—à–µ–Ω–∏–µ –º–∞–π–Ω–µ—Ä–∞ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç—Å—è —Å –æ–∂–∏–¥–∞–µ–º—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º. –ü—Ä–∏ –≤–µ—Ä–Ω–æ–º
        –æ—Ç–≤–µ—Ç–µ –º–∞–π–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –±–ª–æ–∫.
        <br /> ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –º–∞–π–Ω–µ—Ä—É –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è
        –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –±–ª–æ–∫—á–µ–π–Ω–∞.
        <br /> üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏: –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –º–∞–π–Ω–µ—Ä –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–∞–≤–æ –¥–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫, –∏
        —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–ª–æ–∫–∞. –≠—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å, –∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–∫ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ
        —Ä–∞–±–æ—Ç—ã (Proof of Work), –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏—é –±–ª–æ–∫—á–µ–π–Ω–∞. üåêüíº
      </p>
      <p className="mb-4 font-semibold">–†–µ—à–∏—Ç–µ –ø—Ä–∏–º–µ—Ä: {mathExample}</p>
      <input
        type="text"
        className="mb-4 w-full rounded-md border border-gray-300 p-2 focus:outline-none"
        placeholder="–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏, –¥–≤–∞ –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π)"
        value={userAnswer}
        onChange={(e) => setUserAnswer(e.target.value)}
      />
      <button
        className="mr-2 flex w-full justify-center rounded-md bg-blue-500 px-4 py-2 text-white"
        onClick={checkAnswer}
      >
        {isLoading ? <Spinner size="xs" /> : "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç"}
      </button>
      {error && <p className="mt-3 text-center text-red-500">{error}</p>}
    </div>
  );
};
