import React, { FunctionComponent, useState } from "react";
import { FaChevronDown, FaChevronUp } from "react-icons/fa";
import classNames from "classnames";
import moment from "moment";
import { ProfileResM } from "@/api/profile/type";
import { useModal } from "@/hooks/context";
import { Block } from "@/types";
import CloseIcon from "../../icons/Close";

type Props = {
  transactionsForMining: Block[];
  profile: ProfileResM;
};

export const MiningTransactionModal: FunctionComponent<Props> = ({
  transactionsForMining,
  profile,
}) => {
  const { closeModal } = useModal();
  const [openBlockId, setOpenBlockId] = useState<number | null>(null);

  const toggleBlock = (id: number) => {
    setOpenBlockId((prevId) => (prevId === id ? null : id));
  };

  return (
    <div className="max-h-[calc(100vh_-_120px)] max-w-[600px] overflow-y-scroll scrollbar-hide">
      <div className="mb-4 flex justify-between">
        <h2 className="text-2xl font-semibold">‚õèÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–π–Ω–∏–Ω–≥ ‚õèÔ∏è</h2>
        <button onClick={closeModal} className="">
          <CloseIcon className="h-5 w-5 fill-black/50 hover:fill-black/100" />
        </button>
      </div>
      <div className="text-left">
        <p className="mb-4">
          –ú–∞–π–Ω–∏–Ω–≥ - —ç—Ç–æ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å, –≤ —Ö–æ–¥–µ –∫–æ—Ç–æ—Ä–æ–≥–æ üßë‚Äçüíª –º–∞–π–Ω–µ—Ä—ã —Å–æ—Ä–µ–≤–Ω—É—é—Ç—Å—è –∑–∞ —Ä–µ—à–µ–Ω–∏–µ
          —Å–ª–æ–∂–Ω—ã—Ö –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á (Proof of Work) –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤ –≤ –±–ª–æ–∫—á–µ–π–Ω. –≠—Ç–æ
          –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –≤—Å–µ–π —Å–µ—Ç–∏.
        </p>
        <p className="mb-4">
          üåê –ë–ª–∞–≥–æ–¥–∞—Ä—è —É—á–∞—Å—Ç–∏—é –º–∞–π–Ω–µ—Ä–æ–≤, –±–ª–æ–∫—á–µ–π–Ω —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º –¥–∞–Ω–Ω—ã—Ö, –∞
          –æ–Ω–∏ —Å–∞–º–∏ –ø–æ–ª—É—á–∞—é—Ç –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –≤ –≤–∏–¥–µ –Ω–æ–≤—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –º–æ–Ω–µ—Ç –∑–∞ —Å–≤–æ–π –≤–∫–ª–∞–¥ –≤
          –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–µ—Ç–∏.
        </p>
      </div>
      {transactionsForMining.map((block) => (
        <div
          key={block.id}
          className={classNames(
            "border p-4 transition-all",
            openBlockId === block.id ? "animate-accordion-open" : "animate-accordion-close",
          )}
        >
          <div
            className="flex cursor-pointer items-center justify-between"
            onClick={() => toggleBlock(block.id)}
          >
            <h2 className="text-lg font-semibold">
              üß± Block #{block.id} - {moment(block.created_date).format("DD-MM-YYYY h:mm:ss")}
            </h2>
            <div className="p-2">
              {openBlockId === block.id ? <FaChevronUp /> : <FaChevronDown />}
            </div>
          </div>
          {openBlockId === block.id && (
            <div className="mt-4">
              <p>üîó –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ö—ç—à: {block.prevHash}</p>
              <div className="my-4 max-w-md self-start truncate text-gray-600">
                <p>
                  üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <strong>{block.user?.username}</strong>
                </p>
                <p className="truncate">üéÅ –ê–¥—Ä–µ—Å–∞—Ç: {JSON.parse(block.data).receivedAddress}</p>
                <p>üí∞ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {JSON.parse(block.data).amount}</p>
                <p className="truncate">üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {JSON.parse(block.data).message}</p>
              </div>
              <p>üîê –•—ç—à: {block.hash}</p>
            </div>
          )}
        </div>
      ))}
    </div>
  );
};
