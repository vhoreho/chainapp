import React, { FunctionComponent, useState } from "react";
import { useQueryClient } from "@tanstack/react-query";
import { AxiosError } from "axios";
import { useGenerateKeysMutation } from "@/api/users";
import { Spinner } from "@/components/common";
import { USE_QUERY_KEYS } from "@/constants/useQueryKeys";
import { CopySvg } from "../..";
import CloseIcon from "../../icons/Close";

type Props = {
  closeModal: () => void;
  onGenerate: React.Dispatch<React.SetStateAction<boolean>>;
};

export const GenerateKeysModal: FunctionComponent<Props> = ({ closeModal, onGenerate }) => {
  const [privateKey, setPrivateKey] = useState("");
  const [error, setError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const generateKeysMutation = useGenerateKeysMutation();
  const queryClient = useQueryClient();

  const handleGenerateKeys = () => {
    setIsLoading(true);
    setError(null);
    generateKeysMutation.mutateAsync(undefined, {
      onSuccess: (keys) => {
        setPrivateKey(keys.privateKey);
        queryClient.invalidateQueries({ queryKey: [USE_QUERY_KEYS.PROFILE.QUERY.GET] });
        onGenerate(true);
      },
      onError: (error: AxiosError) => {
        console.log("üöÄ ~ file: GenerateKeys.tsx:21 ~ handleGenerateKeys ~ error:", error);
        setError(error.message);
      },
      onSettled: () => setIsLoading(false),
    });
  };

  const handleCopyToClipboard = () => {
    navigator.clipboard.writeText(privateKey);
  };

  return (
    <div className="max-w-[600px]">
      <div className="mb-4 flex justify-between">
        <h2 className="text-2xl font-semibold">–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞</h2>
        <button onClick={closeModal} className="">
          <CloseIcon className="h-5 w-5 fill-black/50 hover:fill-black/100" />
        </button>
      </div>
      <p className="mb-8">
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –∫—Ä–∞–π–Ω–µ –≤–∞–∂–Ω–æ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–∞—à–∏—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö
        –∞–∫—Ç–∏–≤–æ–≤. –≠—Ç–æ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –∫–æ–¥ —Å–ª—É–∂–∏—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∞—à–µ–≥–æ
        –≤–ª–∞–¥–µ–Ω–∏—è. –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á —É —Å–µ–±—è, —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∏ –∏–∑–±–µ–∂–∞—Ç—å
        –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞. üåêüíº –í–∞–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ç–µ—Ä—è–Ω–Ω–æ–≥–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ
        –∫–ª—é—á–∞ —á–∞—Å—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ. –ü–æ—ç—Ç–æ–º—É —Å–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –µ–≥–æ –≤ –Ω–∞–¥–µ–∂–Ω–æ–º –º–µ—Å—Ç–µ –∏ –Ω–µ –¥–µ–ª–∏—Ç–µ—Å—å —Å –Ω–∏–º –Ω–∏ —Å
        –∫–µ–º. –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —Ç–æ–ª—å–∫–æ –≤—ã –±—É–¥–µ—Ç–µ –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–∏–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–º —Å—Ä–µ–¥—Å—Ç–≤–∞–º.
        üîêüí∞
      </p>
      <div className="mb-6 flex w-full shadow-md">
        <div className="relative flex w-full items-center rounded-s-md border border-gray-200 px-3">
          {privateKey ? (
            <span className="max-w-[425px] truncate text-black">{privateKey}</span>
          ) : (
            <span className="max-w-[425px] truncate text-gray-500">
              –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
            </span>
          )}
          <CopySvg
            onClick={handleCopyToClipboard}
            className="absolute right-2 h-4 w-4 cursor-pointer fill-slate-600 hover:fill-cornflower-500"
          />
        </div>
        <button
          onClick={handleGenerateKeys}
          className="inline-flex min-w-[135px] justify-center self-end rounded-e-md border border-transparent bg-blue-500 px-4 py-[10px] text-sm font-medium text-white shadow-sm transition-all hover:bg-blue-700 focus:outline-none"
        >
          {isLoading ? <Spinner size="xs" /> : <span>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å</span>}
        </button>
        {error && <span className="mt-3 text-red-500">{error}</span>}
      </div>
    </div>
  );
};
